%YAML 1.2
---
name: Overwatch Workshop
file_extensions: [workshop, owws]
scope: source.workshop

variables:
  heros: "Ana|Ashe|Baptiste|Bastion|Brigitte|D\\.Va|Doomfist|Genji|Hanzo|Junkrat|Lúcio|McCree|Mei|Mercy|Moira|Orisa|Pharah|Reaper|Reinhardt|Roadhog|Soldier\\: 76|Sombra|Symmetra|Torbjörn|Tracer|Widowmaker|Winston|Wrecking Ball|Zarya|Zenyatta"
  status_effects: Hacked|Knocked Down|Asleep|Frozen|Stunned|Invincible|Unkillable
  events: Ongoing - Global|Ongoing - Each Player|Player Earned Elimination|Player Dealt Final Blow|Player Dealt Damage|Player Took Damage|Player Died
  modifiers: Add|Subtract|Multiply|Divide|Modulo|Raise To Power|Min|Max|Append To Array|Remove From Array By Value|Remove From Array By Index
  global_vars: Event Player|Is Assembling Heroes|Is In Setup

contexts:
  main:
    - match: rule
      scope: storage.type.class
    - match: \(
      push:
      - match: '"'
        push:
        - meta_scope: entity.name.class
        - match: '"'
          pop: true
      - match: \)
        pop: true
    - include: rule
    - include: disabled_rule

  disabled_rule:
    - match: disabled\W
      scope: comment.block
      push:
        - meta_scope: comment.block
        - match: \{
          set:
            - meta_scope: comment.block
            - include: bracket

  disabled_line:
    - match: disabled\W
      push:
      - meta_scope: comment.line
      - match: \;
        pop: true

  rule:
    - match: \{
      push: 
        - match: event
          scope: keyword
          push: event
        - match: conditions
          scope: keyword
          push:
          - match: \{
            set:
              - include: disabled_line
              - include: language
              - include: bracket
        - match: actions
          scope: keyword
          push:
          - match: \{
            set:
              - include: disabled_line
              - include: actions
              - include: bracket
        - match: \}
          pop: true


  event:
    - match: \{
      push:
        - match: "{{events}}"
          scope: entity.name.enum
          set:
            - - match: All|Slot \d[01]?(?=\D)
                scope: variable.language
              - match: "{{heros}}"
                scope: constant.language
              - include: exit
            - - match: All|Team 1|Team 2
                scope: variable.language
              - include: exit
            - exit
    - match: "[^{\\s]|}"
      pop: true

  exit: 
    - match: \;
      pop: true
    - match: (?=\})
      pop: true

  string:
    - match: '"'
      push:
      - meta_scope: string.quoted.double.c
      - match: \{\d\}
        scope: constant.character.escape.c
      - match: '"'
        pop: true

  constants: 
    - match: \d\.?|\.?\d
      scope: constant.numeric
    - match: Null|True|False
      scope: constant.language

  operators:
    - match: =|\!|>|<
      scope: keyword.operator

  bracket:
    - meta_scope: in_brackets
    - match: \}
      pop: true
    - match: \{
      push: bracket

  language:
    - include: string
    - include: constants
    - include: operators
    - match: "{{heros}}"
      scope: constant.language
    - include: variable_names
    - include: conditions

  variable_names:
    - match: "([A-Z])(?=[^A-Za-z])"
      scope: variable.language

  # Use this to escape function
  exit_function:
    - match: \)
      pop: true

  # Use this to mark stray marks in functions/actions/conditions, place after exit_function if last arg
  function_arg:
    - match: \;
      scope: invalid.illegal.semi-colon-in-function
    - match: \)
      scope: invalid.illegal.function-not-enough-args
    - match: ","
      pop: true

## Actions
  # Actions multiplexor
  actions:
    # Loop Action
    - match: Loop If Condition Is (?:True|False)
      scope: variable.function
    # Modify Global Variable Action
    - match: Modify Global Variable(?=\()
      scope: variable.function
      push: modify_global_variable_action
    # Modify Player Variable Action
    - match: Modify Player Variable(?=\()
      scope: variable.function
      push: modify_player_variable_action
    # Wait Action
    - match: Wait(?=\()
      scope: variable.function
      push: wait_action
    - match: ((?:[A-Z][a-z]*\s?)+)(?=\()
      scope: variable.function
      push:
        - include: language 
        - include: exit_function

  # Modify Global Variable Action
  modify_global_variable_action:
    - match: \(
      set:
          - - include: language
            - include: exit_function
            - include: function_arg
          - - match: "{{modifiers}}"
              scope: keyword.operator
            - include: function_arg
          - - include: variable_names
            - include: function_arg

  # Modify Player Variable Action
  modify_player_variable_action:
    - match: \(
      set:
          - - include: language
            - include: exit_function
            - include: function_arg
          - - match: "{{modifiers}}"
              scope: keyword.operator
            - include: function_arg
          - - include: variable_names
            - include: function_arg
          - - include: language
            - include: function_arg

  # Wait action
  wait_action:
    - match: \(
      set:
        - - match: Abort When False|Restart When True|Ignore Condition
            scope: constant.language
          - include: exit_function
          - include: function_arg
        - - include: language
          - include: function_arg


## Conditions
  # Conditions Multiplexer
  conditions:
    # Has Status Function
    - match: Has Status(?=\()
      scope: variable.function
      push: has_status_condition
    # Variable conditions
    - match: "{{global_vars}}"
      scope: variable.language
    # Other Functions
    - match: ((?:[A-Z][a-z]*\s?)+)(?=\()
      scope: variable.function
      push:
        - include: language 
        - include: exit_function

  # Has Status Condition
  has_status_condition:
    - match: \(
      set:
        - - match: "{{status_effects}}"
            scope: constant.language
          - include: exit_function
          - include: function_arg
        - - include: language
          - include: function_arg
 


